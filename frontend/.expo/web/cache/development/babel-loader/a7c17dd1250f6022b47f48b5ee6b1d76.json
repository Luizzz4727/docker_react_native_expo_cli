{"ast":null,"code":"import useCode from \"../derived/useCode\";\nimport AnimatedNode from \"./AnimatedNode\";\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    var error = !children ? \"Got \\\"\" + typeof children + \"\\\" type passed to children\" : \"Got \\\"\" + typeof exec + \"\\\" type passed to exec\";\n    throw new Error(\"<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. \" + error);\n  }\n}\nfunction Code(_ref) {\n  var exec = _ref.exec,\n    children = _ref.children,\n    dependencies = _ref.dependencies;\n  var nodes = children || exec;\n  var code = null;\n  if (nodes instanceof AnimatedNode) {\n    code = function code() {\n      return nodes;\n    };\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n  assertNodesNotNull(code, children, exec);\n  useCode(code, dependencies);\n  return null;\n}\nexport default Code;","map":{"version":3,"names":["useCode","AnimatedNode","assertNodesNotNull","code","children","exec","error","Error","Code","dependencies","nodes"],"sources":["C:/Users/maria/Desktop/sojoga/sojoga/frontend/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCode.js"],"sourcesContent":["import useCode from '../derived/useCode';\r\nimport AnimatedNode from './AnimatedNode';\r\n\r\nfunction assertNodesNotNull(code, children, exec) {\r\n  if (!code) {\r\n    const error = !children\r\n      ? `Got \"${typeof children}\" type passed to children`\r\n      : `Got \"${typeof exec}\" type passed to exec`;\r\n\r\n    throw new Error(\r\n      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`\r\n    );\r\n  }\r\n}\r\n\r\nfunction Code({ exec, children, dependencies }) {\r\n  const nodes = children || exec;\r\n\r\n  let code = null;\r\n  if (nodes instanceof AnimatedNode) {\r\n    code = () => nodes;\r\n  } else if (typeof nodes === 'function') {\r\n    code = nodes;\r\n  }\r\n\r\n  assertNodesNotNull(code, children, exec);\r\n\r\n  useCode(code, dependencies);\r\n  return null;\r\n}\r\n\r\nexport default Code;\r\n"],"mappings":"AAAA,OAAOA,OAAO;AACd,OAAOC,YAAY;AAEnB,SAASC,kBAAkB,CAACC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EAChD,IAAI,CAACF,IAAI,EAAE;IACT,IAAMG,KAAK,GAAG,CAACF,QAAQ,cACX,OAAOA,QAAQ,6CACf,OAAOC,IAAI,2BAAuB;IAE9C,MAAM,IAAIE,KAAK,6HAC6GD,KAAK,CAChI;EACH;AACF;AAEA,SAASE,IAAI,OAAmC;EAAA,IAAhCH,IAAI,QAAJA,IAAI;IAAED,QAAQ,QAARA,QAAQ;IAAEK,YAAY,QAAZA,YAAY;EAC1C,IAAMC,KAAK,GAAGN,QAAQ,IAAIC,IAAI;EAE9B,IAAIF,IAAI,GAAG,IAAI;EACf,IAAIO,KAAK,YAAYT,YAAY,EAAE;IACjCE,IAAI,GAAG;MAAA,OAAMO,KAAK;IAAA;EACpB,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;IACtCP,IAAI,GAAGO,KAAK;EACd;EAEAR,kBAAkB,CAACC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,CAAC;EAExCL,OAAO,CAACG,IAAI,EAAEM,YAAY,CAAC;EAC3B,OAAO,IAAI;AACb;AAEA,eAAeD,IAAI"},"metadata":{},"sourceType":"module"}